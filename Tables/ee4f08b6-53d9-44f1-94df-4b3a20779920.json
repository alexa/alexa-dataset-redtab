{"relation": [["JOURNAL", "Oracle Magazine", "Oracle Magazine"], ["PUBLISHER", "Oracle Publishing", "Oracle Publishing"], ["EDITION", "Nov-Dec 2003", "Jan-Feb 2004"], ["TITLE", "Updating XQuery", "Designing Schemas"], ["AUTHOR", "Jason Hunter", "Cameron O'Rourke"]], "pageTitle": "SQL Database Access with DBTags - O'Reilly Media", "title": "", "url": "http://www.onjava.com/pub/a/onjava/2004/05/05/dbtags.html?page=last&x-order=date", "hasHeader": true, "headerPosition": "FIRST_ROW", "tableType": "RELATION", "tableNum": 5, "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042988061.16/warc/CC-MAIN-20150728002308-00081-ip-10-236-191-2.ec2.internal.warc.gz", "recordEndOffset": 624629321, "recordOffset": 624613377, "tableOrientation": "VERTICAL", "TableContextTimeStampAfterTable": "{32610=\u00a9 2015, O\u2019Reilly Media, Inc.}", "textBeforeTable": "Inside of the sql:resultSet tag, we can use sql:getColumn tags to retrieve the value for a given column and put it in the HTML. In this case, we have a table row inside of the sql:resultSet, and inside each table cell (<td>), we use sql:getColumn to populate the cell value. The result looks like the following: </table> </sql:statement> </sql:resultSet> </tr> <td><sql:getColumn position=\"5\"/></td> <td><sql:getColumn position=\"4\"/></td> <td><sql:getColumn position=\"3\"/></td> <td><sql:getColumn position=\"2\"/></td> <td><sql:getColumn position=\"1\"/></td> <tr> <sql:resultSet id=\"rset1\"> </sql:query> from OracleCatalog select JOURNAL, PUBLISHER, EDITION, TITLE, AUTHOR <sql:query> <sql:statement id=\"stmt4\" conn=\"conn1\"> </tr> <td>AUTHOR</td> <td>TITLE</td> <td>EDITION</td> <td>PUBLISHER</td> <td>JOURNAL</td> <tr> <table BORDER> With DBTags sql:resultSet tag is used to retrieve and iterate through a SQL query result set. The sql:getColumn tag retrieves the column values in a result set. } String var=rs.getString(\"...\"); while(rs.next()){ The result set is iterated with code like the following: ResultSet rs=stmt.executeQuery(\"SELECT ...\"); To run a query and get results in a JSP scriptlet, a ResultSet has to be created with: Generating a ResultSet from a Database Table </sql:statement> <sql:execute ignoreErrors=\"true\"/> <%-- execute the query --%> </sql:query> 'Cameron O'Rourke') 'Designing Schemas', 'Jan-Feb 2004', 'Oracle Publishing', INSERT INTO OracleCatalog VALUES('Oracle Magazine', <sql:query> <%--SQL query to add values to a table--%> <sql:statement id=\"stmt2\" conn=\"conn1\"> An sql:statement is also used to insert values into the newly created table. The SQL query to create the table is set with the sql:query tag. This query is then executed with the sql:execute tag, which has an attribute ignoreErrors. If this attribute is set to true, it ignores an SQLException", "textAfterTable": "Updating a Database Table with a Prepared Statement A prepared statement is a SQL query with ? symbols. The column values represented by the ? symbols are set with a separate set of tags. If a JSP scriptlet is used to update a database table with a prepared statement, a prepared statement has to be created with: PreparedStatement stmt=conn.prepareStatement(\"UPDATE ...\"); The column values are set with: stmt.setString(\"...\"); stmt.setInt(\"...\"); The prepared statement is executed with: stmt.executeUpdate(); A prepared statement with DBTags is generated with the sql:preparedStatement tag. In the example JSP, the database table OracleCatalog is updated with a prepared statement, as follows: <sql:preparedStatement id=\"stmt5\" conn=\"conn1\"> <%-- prepared statement SQL query --%> <sql:query> UPDATE OracleCatalog SET TITLE=?, AUTHOR=? WHERE TITLE=? </sql:query> <sql:execute> <sql:setColumn position=\"1\"><%=title%></sql:setColumn> <sql:setColumn position=\"2\"><%=author%></sql:setColumn> <sql:setColumn position=\"3\">Updating XQuery</sql:setColumn> </sql:execute> </sql:preparedStatement> The column values in the prepared statement are set with the sql:setColumn tag. After updating the table, the example code query produces the following results: JOURNAL PUBLISHER EDITION TITLE AUTHOR Oracle Magazine Oracle Publishing Nov-Dec 2003 Unicode Enables Globalization Jonathan Gennick Oracle Magazine Oracle Publishing Jan-Feb 2004 Designing Schemas Cameron O'Rourke Finally, when the JSP is finished with the database connection, it closes it with the sql:closeConnection DBTags tag: <sql:closeConnection conn=\"conn1\"/> Conclusion DBTags custom tag library is used for servlet specifications prior to Servlet 2.3. For Servlet 2.3 and 2.4 specification implementations, Jakarta's Standard Tag Library 1.1, which is an implementation of JavaServer Pages Standard", "hasKeyColumn": true, "keyColumnIndex": 0, "headerRowIndex": 0}