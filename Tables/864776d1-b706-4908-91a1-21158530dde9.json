{"relation": [["Title", "Python", "XML"], ["Author", "R.Baldwin", "R.Baldwin"], ["Price", "15.42", "19.60"]], "pageTitle": "Learning XML: Using Conditional Tests - Developer.com", "title": "", "url": "http://www.developer.com/xml/article.php/640791/Learning-XML-Using-Conditional-Tests.htm", "hasHeader": true, "headerPosition": "FIRST_ROW", "tableType": "RELATION", "tableNum": 4, "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042988061.16/warc/CC-MAIN-20150728002308-00216-ip-10-236-191-2.ec2.internal.warc.gz", "recordEndOffset": 386917999, "recordOffset": 386892852, "tableOrientation": "HORIZONTAL", "TableContextTimeStampAfterTable": "{41076=<!-- File XSL006.xml Copyright 2000 R. G. Baldwin Illustrates defining data as numeric data.\u00a0 Also illustrates using a \"greater than\" conditional test., 43195=<?xml version='1.0'?> <!-- File XSL006.xml Copyright 2000 R. G. Baldwin Illustrates defining data as numeric data.\u00a0 Also illustrates using a \"greater than\" conditional test. Works with IE5.0 --> <xsl:stylesheet\u00a0 xmlns:xsl=\"http://www.w3.org/TR/WD-xsl\">}", "textBeforeTable": "\u00a0 A listing of the output HTML produced by this program is shown near the end of the lesson.\u00a0 I captured this HTML code using the Microsoft XSL Debugger discussed in an earlier lesson. If you load this XML file into your IE5 browser, you should see something very similar to the following table in the browser window. The Output In summary, this XSLT file, when used to transform the given XML file, will produce an HTML table containing information about those books in the XML database whose price is greater than 9.95. Now let's look at some output. If this express is true, the result of processing the code that makes up the content of the element is passed to the output. If the expression is not true (false), the code that makes up the content of the element is simply ignored. This has the effect of inserting the data for only those data elements whose price value is greater than 9.95 into a row in the output HTML table. I will skip the remaining code in the XSLT file because it consists solely of end tags that I have discussed in earlier lessons. \u00a0<xsl:if test=\"price[.>9.95]\"> On the strength of the explanation provided in the sidebar, we can say that the following expression tests to determine if the value of the price element in the current book element", "textAfterTable": "\u00a0Browser Output As you can see, the book named Java described by the XML element shown in the following, did not make its way into the output HTML table. This is because its price was exactly 9.95, which is not greater than 9.95.\u00a0 Therefore, it was filtered out. <theData> <title>Java</title> <author>R.Baldwin</author> <price dataType:dt=\"number\">9.95</price> </theData> The other two books in the XML database had price values greater than 9.95, and therefore met the filter criteria.\u00a0 They were passed through to the output table. Recap So there you have it.\u00a0 The use of an XSLT file to transform the contents of a simple XML database into an HTML table, and to use the xsl:if conditional processing element to determine which data are passed through to the output, and which data are filtered out. Although it isn't illustrated here, the conditional test can also be performed on attribute values associated with the XML data elements. For example, if the books had a type attribute, books with a type attribute of dogs could be passed through while books with a type attribute of plants could be rejected. Complete Program ListingsThe following is a complete listing of the XML file ( XSL006.xml): \u00a0 <?xml version=\"1.0\"?> <!-- File XSL006.xml Copyright 2000 R. G. Baldwin Illustrates defining data as numeric", "hasKeyColumn": true, "keyColumnIndex": 0, "headerRowIndex": 0}